#ifndef _E__SHELL_H_
#define _E__SHELL_H_

#include "stdint.h"
#include "stdbool.h"
#include "e_config.h"

typedef enum _fun_key_status
{
    kSHELL_Normal = 0U,   /*!< Normal key */
    kSHELL_Special = 1U,  /*!< Special key */
    kSHELL_Function = 2U, /*!< Function key */
} fun_key_status_t;


typedef struct _shell_command_context  _shell_command_context_t;

typedef int32_t (*cmd_function_t)(_shell_command_context_t * shell_context, int32_t argc, char **argv);

typedef struct _shell_command_context
{
    char *pcCommand; /*!< The command that is executed.  For example "help".  It must be all lower case. */
    char *pcHelpString;    /*!< String that describes how to use the command.  It should start with the command itself,
                                    and end with "\r\n".  For example "help: Returns a list of all the commands\r\n". */
    cmd_function_t  pFuncCallBack; /*!< A pointer to the callback function that returns the output generated by the command. */

    uint32_t MinPrivilegeLevel;

} e_shell__command_context_t;

typedef struct _shell_command_context_list
{
    e_shell__command_context_t CommandList[CONFIG__E_SHELL_MAX_CMD]; /*!< The command table list */
    uint8_t numberOfCommandInList;                             /*!< The total command in list */
} e_shell__command_context_list_t;

typedef struct _shell_context_struct
{
    char *prompt;
    enum _fun_key_status stat;
    char *Description;
    char line[CONFIG__E_SHELL_BUFFER_SIZE];
    uint32_t                    CurrentPrivilegeLevel;
    uint8_t cmd_num;
    uint8_t l_pos;
    uint8_t c_pos;
    uint8_t echo;
    uint8_t QuietOnBadCommand;
    
    byte_queue_t	*rx_bq;		//byte queue with incoming data
    byte_queue_t	*tx_bq;		//byte queue with outgoing data

    uint16_t hist_current;                            /*!< Current history command in hist buff*/
    uint16_t hist_count;                              /*!< Total history command in hist buff*/
    char hist_buf[CONFIG__E_SHELL_HIST_MAX][CONFIG__E_SHELL_BUFFER_SIZE]; /*!< History buffer*/

    char  g_paramBuffer[CONFIG__E_SHELL_BUFFER_SIZE];

    e_shell__command_context_list_t        ShellCommands;

} e_shell__context_struct, *e_shell__context_t;


#if defined(__cplusplus)
extern "C" {
#endif /* _cplusplus */

int32_t e_shell__register_cmd(e_shell__context_t shell,
                              char *command,
							  char *help_string,
                              cmd_function_t  cmd_callback,
                              uint32_t min_privledge_level
							  );

int32_t e_shell__printf(const e_shell__context_struct * shell,const char *FormatString,...);

void e_shell__crunch(e_shell__context_t shell);

cmd_function_t shell__help_handler(e_shell__context_t shell, int32_t argc, char **argv);



#if defined(__cplusplus)
}
#endif

/*! @}*/

#endif /* _FSL_SHELL_H_ */
