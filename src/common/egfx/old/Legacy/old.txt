
typedef int16_t FIXED_7_8;
typedef int16_t FIXED_9_6;

typedef int16_t FIXED_0_15;
typedef int16_t FIXED_1_14;

void eGFX_WEAK eGFX_DrawListPrimitive(eGFX_ImagePlane *Image,
                            eGFX_ListPrimitive *LP ,
                            eGFX_PixelState PS)
{
    uint8_t Points;
    uint8_t i;

    if(LP->NumPoints >1)
    {
        switch(LP->DrawMode)
        {
            default:
            case eGFX_LIST_PRIMITIVE_CLOSED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(LP->PointList[i-1].Y + LP->Center.Y),
                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(LP->PointList[i].Y + LP->Center.Y),PS);
                }

                eGFX_DrawLine(Image,(int16_t)(LP->PointList[LP->NumPoints-1].X + LP->Center.X),(int16_t)(LP->PointList[LP->NumPoints-1].Y + LP->Center.Y),
                              (int16_t)(LP->PointList[0].X + LP->Center.X),(int16_t)(LP->PointList[0].Y + LP->Center.Y),PS);
                break;

            case eGFX_LIST_PRIMITIVE_CONNECTED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(LP->PointList[i-1].Y + LP->Center.Y),
                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(LP->PointList[i].Y + LP->Center.Y),PS);
                }

                break;

            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
                Points = LP->NumPoints>>1;

                for(i=0; i<Points; i++)
                {
                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i*2].X + LP->Center.X),(int16_t)(LP->PointList[i*2].Y + LP->Center.Y),
                                  (int16_t)(LP->PointList[i*2+1].X + LP->Center.X),(int16_t)(LP->PointList[i*2+1].Y + LP->Center.Y),PS);
                }

                break;

            case eGFX_LIST_PRIMITIVE_CLOSED_YFLIPPED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(-LP->PointList[i-1].Y + LP->Center.Y),
                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(-LP->PointList[i].Y + LP->Center.Y),PS);
                }

                eGFX_DrawLine(Image,(int16_t)(LP->PointList[LP->NumPoints-1].X + LP->Center.X),(int16_t)(-LP->PointList[LP->NumPoints-1].Y + LP->Center.Y),
                              (int16_t)(LP->PointList[0].X + LP->Center.X),(int16_t)(-LP->PointList[0].Y + LP->Center.Y),PS);
                break;

            case eGFX_LIST_PRIMITIVE_CONNECTED_YFLIPPED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i-1].X + LP->Center.X),(int16_t)(-LP->PointList[i-1].Y + LP->Center.Y),
                                  (int16_t)(LP->PointList[i].X + LP->Center.X),(int16_t)(-LP->PointList[i].Y + LP->Center.Y),PS);
                }

                break;

            case eGFX_LIST_PRIMITIVE_DISCONNECTED_YFLIPPED:
                Points = LP->NumPoints>>1;

                for(i=0; i<Points; i++)
                {
                    eGFX_DrawLine(Image,(int16_t)(LP->PointList[i*2].X + LP->Center.X),(int16_t)(-LP->PointList[i*2].Y + LP->Center.Y),
                                  (int16_t)(LP->PointList[i*2+1].X + LP->Center.X),(int16_t)(-LP->PointList[i*2+1].Y + LP->Center.Y),PS);
                }

                break;
        }
    }
}



#define ROUND_TO_INT16_T(x)	((int16_t)(x + 0.5f))

extern const FIXED_1_14 eGFX_Fixed_1_14_SineTable [256];
extern const FIXED_7_8 eGFX_Fixed_7_8_SineTable[256];

#define eGFX_GET_INT_FROM_FIXED_7_8(A)				(int16_t)(A>>8)
#define eGFX_INT_TO_FIXED_7_8(A)					((FIXED_7_8)(A)<<8)
#define eGFX_GET_FRAC_FROM_FIXED_7_8(A)				(FIXED_7_8)(A&0xFF)

#define eGFX_GET_INT_FROM_FIXED_9_6_(A)				(int16_t)(A>>6)
#define eGFX_INT_TO_FIXED_9_6(A)					((FIXED_9_6)(A)<<6)
#define eGFX_GET_FRAC_FROM_FIXED_6_9(A)				(FIXED_9_6)(A&0x3F)

typedef struct
{
    eGFX_Point Center;
    uint8_t NumPoints;
    uint8_t DrawMode;
    const eGFX_Point *PointList;

} eGFX_ListPrimitive;



#define eGFX_LIST_PRIMITIVE_CONNECTED                              0x01
#define eGFX_LIST_PRIMITIVE_DISCONNECTED                           0x02
#define eGFX_LIST_PRIMITIVE_CLOSED								   0x03
#define eGFX_LIST_PRIMITIVE_CONNECTED_YFLIPPED			 		   0x04
#define eGFX_LIST_PRIMITIVE_DISCONNECTED_YFLIPPED		   		   0x05
#define eGFX_LIST_PRIMITIVE_CLOSED_YFLIPPED			   			   0x06
/***
 *      ______ _              _   _____      _       _      ____                       _   _
 *     |  ____(_)            | | |  __ \    (_)     | |    / __ \                     | | (_)
 *     | |__   ___  _____  __| | | |__) |__  _ _ __ | |_  | |  | |_ __   ___ _ __ __ _| |_ _  ___  _ __  ___
 *     |  __| | \ \/ / _ \/ _` | |  ___/ _ \| | '_ \| __| | |  | | '_ \ / _ \ '__/ _` | __| |/ _ \| '_ \/ __|
 *     | |    | |>  <  __/ (_| | | |  | (_) | | | | | |_  | |__| | |_) |  __/ | | (_| | |_| | (_) | | | \__ \
 *     |_|    |_/_/\_\___|\__,_| |_|   \___/|_|_| |_|\__|  \____/| .__/ \___|_|  \__,_|\__|_|\___/|_| |_|___/
 *                                                               | |
 *                                                               |_|
 */

const FIXED_1_14 eGFX_Fixed_1_14_SineTable[256] = { 0x0000, 0x0192, 0x0324, 0x04B5, 0x0646, 0x07D6, 0x0964, 0x0AF1,
                                                0x0C7C,0x0E06,0x0F8D,0x1112,0x1294,0x1413,0x1590,0x1709,
                                                0x187E,0x19EF,0x1B5D,0x1CC6,0x1E2B,0x1F8C,0x20E7,0x223D,
                                                0x238E,0x24DA,0x2620,0x2760,0x289A,0x29CE,0x2AFB,0x2C21,
                                                0x2D41,0x2E5A,0x2F6C,0x3076,0x3179,0x3274,0x3368,0x3453,
                                                0x3537,0x3612,0x36E5,0x37B0,0x3871,0x392B,0x39DB,0x3A82,
                                                0x3B21,0x3BB6,0x3C42,0x3CC5,0x3D3F,0x3DAF,0x3E15,0x3E72,
                                                0x3EC5,0x3F0F,0x3F4F,0x3F85,0x3FB1,0x3FD4,0x3FEC,0x3FFB,
                                                0x4000,0x3FFB,0x3FEC,0x3FD4,0x3FB1,0x3F85,0x3F4F,0x3F0F,
                                                0x3EC5,0x3E72,0x3E15,0x3DAF,0x3D3F,0x3CC5,0x3C42,0x3BB6,
                                                0x3B21,0x3A82,0x39DB,0x392B,0x3871,0x37B0,0x36E5,0x3612,
                                                0x3537,0x3453,0x3368,0x3274,0x3179,0x3076,0x2F6C,0x2E5A,
                                                0x2D41,0x2C21,0x2AFB,0x29CE,0x289A,0x2760,0x2620,0x24DA,
                                                0x238E,0x223D,0x20E7,0x1F8C,0x1E2B,0x1CC6,0x1B5D,0x19EF,
                                                0x187E,0x1709,0x1590,0x1413,0x1294,0x1112,0x0F8D,0x0E06,
                                                0x0C7C,0x0AF1,0x0964,0x07D6,0x0646,0x04B5,0x0324,0x0192,
                                                0x0000,0xFE6E,0xFCDC,0xFB4B,0xF9BA,0xF82A,0xF69C,0xF50F,
                                                0xF384,0xF1FA,0xF073,0xEEEE,0xED6C,0xEBED,0xEA70,0xE8F7,
                                                0xE782,0xE611,0xE4A3,0xE33A,0xE1D5,0xE074,0xDF19,0xDDC3,
                                                0xDC72,0xDB26,0xD9E0,0xD8A0,0xD766,0xD632,0xD505,0xD3DF,
                                                0xD2BF,0xD1A6,0xD094,0xCF8A,0xCE87,0xCD8C,0xCC98,0xCBAD,
                                                0xCAC9,0xC9EE,0xC91B,0xC850,0xC78F,0xC6D5,0xC625,0xC57E,
                                                0xC4DF,0xC44A,0xC3BE,0xC33B,0xC2C1,0xC251,0xC1EB,0xC18E,
                                                0xC13B,0xC0F1,0xC0B1,0xC07B,0xC04F,0xC02C,0xC014,0xC005,
                                                0xC000,0xC005,0xC014,0xC02C,0xC04F,0xC07B,0xC0B1,0xC0F1,
                                                0xC13B,0xC18E,0xC1EB,0xC251,0xC2C1,0xC33B,0xC3BE,0xC44A,
                                                0xC4DF,0xC57E,0xC625,0xC6D5,0xC78F,0xC850,0xC91B,0xC9EE,
                                                0xCAC9,0xCBAD,0xCC98,0xCD8C,0xCE87,0xCF8A,0xD094,0xD1A6,
                                                0xD2BF,0xD3DF,0xD505,0xD632,0xD766,0xD8A0,0xD9E0,0xDB26,
                                                0xDC72,0xDDC3,0xDF19,0xE074,0xE1D5,0xE33A,0xE4A3,0xE611,
                                                0xE782,0xE8F7,0xEA70,0xEBED,0xED6C,0xEEEE,0xF073,0xF1FA,
                                                0xF384,0xF50F,0xF69C,0xF82A,0xF9BA,0xFB4B,0xFCDC,0xFE6E
                                              };

const FIXED_7_8 eGFX_Fixed_7_8_SineTable[256] = { 0x0000, 0x0006, 0x000D, 0x0013, 0x0019, 0x001F, 0x0026, 0x002C,
                                                0x0032,0x0038,0x003E,0x0044,0x004A,0x0050,0x0056,0x005C,
                                                0x0062,0x0068,0x006D,0x0073,0x0079,0x007E,0x0084,0x0089,
                                                0x008E,0x0093,0x0098,0x009D,0x00A2,0x00A7,0x00AC,0x00B1,
                                                0x00B5,0x00B9,0x00BE,0x00C2,0x00C6,0x00CA,0x00CE,0x00D1,
                                                0x00D5,0x00D8,0x00DC,0x00DF,0x00E2,0x00E5,0x00E7,0x00EA,
                                                0x00ED,0x00EF,0x00F1,0x00F3,0x00F5,0x00F7,0x00F8,0x00FA,
                                                0x00FB,0x00FC,0x00FD,0x00FE,0x00FF,0x00FF,0x0100,0x0100,
                                                0x0100,0x0100,0x0100,0x00FF,0x00FF,0x00FE,0x00FD,0x00FC,
                                                0x00FB,0x00FA,0x00F8,0x00F7,0x00F5,0x00F3,0x00F1,0x00EF,
                                                0x00ED,0x00EA,0x00E7,0x00E5,0x00E2,0x00DF,0x00DC,0x00D8,
                                                0x00D5,0x00D1,0x00CE,0x00CA,0x00C6,0x00C2,0x00BE,0x00B9,
                                                0x00B5,0x00B1,0x00AC,0x00A7,0x00A2,0x009D,0x0098,0x0093,
                                                0x008E,0x0089,0x0084,0x007E,0x0079,0x0073,0x006D,0x0068,
                                                0x0062,0x005C,0x0056,0x0050,0x004A,0x0044,0x003E,0x0038,
                                                0x0032,0x002C,0x0026,0x001F,0x0019,0x0013,0x000D,0x0006,
                                                0x0000,0xFFFA,0xFFF3,0xFFED,0xFFE7,0xFFE1,0xFFDA,0xFFD4,
                                                0xFFCE,0xFFC8,0xFFC2,0xFFBC,0xFFB6,0xFFB0,0xFFAA,0xFFA4,
                                                0xFF9E,0xFF98,0xFF93,0xFF8D,0xFF87,0xFF82,0xFF7C,0xFF77,
                                                0xFF72,0xFF6D,0xFF68,0xFF63,0xFF5E,0xFF59,0xFF54,0xFF4F,
                                                0xFF4B,0xFF47,0xFF42,0xFF3E,0xFF3A,0xFF36,0xFF32,0xFF2F,
                                                0xFF2B,0xFF28,0xFF24,0xFF21,0xFF1E,0xFF1B,0xFF19,0xFF16,
                                                0xFF13,0xFF11,0xFF0F,0xFF0D,0xFF0B,0xFF09,0xFF08,0xFF06,
                                                0xFF05,0xFF04,0xFF03,0xFF02,0xFF01,0xFF01,0xFF00,0xFF00,
                                                0xFF00,0xFF00,0xFF00,0xFF01,0xFF01,0xFF02,0xFF03,0xFF04,
                                                0xFF05,0xFF06,0xFF08,0xFF09,0xFF0B,0xFF0D,0xFF0F,0xFF11,
                                                0xFF13,0xFF16,0xFF19,0xFF1B,0xFF1E,0xFF21,0xFF24,0xFF28,
                                                0xFF2B,0xFF2F,0xFF32,0xFF36,0xFF3A,0xFF3E,0xFF42,0xFF47,
                                                0xFF4B,0xFF4F,0xFF54,0xFF59,0xFF5E,0xFF63,0xFF68,0xFF6D,
                                                0xFF72,0xFF77,0xFF7C,0xFF82,0xFF87,0xFF8D,0xFF93,0xFF98,
                                                0xFF9E,0xFFA4,0xFFAA,0xFFB0,0xFFB6,0xFFBC,0xFFC2,0xFFC8,
                                                0xFFCE,0xFFD4,0xFFDA,0xFFE1,0xFFE7,0xFFED,0xFFF3,0xFFFA
                                            };

FIXED_7_8 eGFX_GET_INT_FROM_FIXED_7_8_ROUND_TO_NEAREST(FIXED_7_8 A)
{
    FIXED_7_8 RetVal = 0;

    if(A&0x0080)
        RetVal = 1;

    RetVal += A>>8;
    return RetVal;
}

FIXED_7_8 eGFX_FLOAT_TO_FIXED_7_8(float A)
{
    if(A>(float)((FIXED_7_8)(32767)>>8))
                return  (FIXED_7_8)((float)(32767) / (float)(256));
    else if(A<(float)((FIXED_7_8)(-32768)>>8))
                return (FIXED_7_8)((float)(-32768) / (float)256);
    else
        return (FIXED_7_8)(A * 256);
}

int16_t eGFX_FMul_15_0to0_15(int16_t A, int16_t B)
{
    return  (((long)(A) * (long)(B))>>15);
}

int16_t eGFX_FMul_7_8to0_15(int16_t A, int16_t B)
{
    return  (((long)(A) * (long)(B))>>15);
}

int16_t eGFX_FMul_15_0to7_8(int16_t A,int16_t B)
{
    return  (((long)(A) * (long)(B))>>8);
}

int16_t eGFX_FMul_15_0to1_14(int16_t A,int16_t B)
{
    long temp;
    temp = (((long)(A) * (long)(B))>>13);

    if(temp&0x01)
    {
        temp = temp>>1;
        temp = temp +1;
    }
    else
    {
        temp = temp>>1;
    }

    return  (int16_t)temp;
}

int16_t eGFX_ABS(int16_t A)
{
    if(A<0)
        return -A;
    else
        return A;
}


/*
void eGFX_WEAK eGFX_DrawScaledListPrimitive(eGFX_ImagePlane *Image,
                                  eGFX_ListPrimitive *LP ,
                                  FIXED_7_8 Scale,
                                  eGFX_PixelState PS)
{
    uint8_t Points;
    uint8_t i;
    eGFX_Point TransformedPoint[2];

    if(LP->NumPoints >1)
    {
        switch(LP->DrawMode)
        {
            default:
            case eGFX_LIST_PRIMITIVE_CLOSED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i-1].X,Scale)     + LP->Center.X;
                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i-1].Y,Scale)   + LP->Center.Y;
                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[i].X,Scale)     + LP->Center.X;
                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[i].Y,Scale)     + LP->Center.Y;
                    eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
                                  TransformedPoint[1].X,TransformedPoint[1].Y,PS);
                }

                TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[LP->NumPoints-1].X,Scale)   + LP->Center.X;
                TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[LP->NumPoints-1].Y,Scale)   + LP->Center.Y;
                TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[0].X,Scale)                            + LP->Center.X;
                TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[0].Y,Scale)                            + LP->Center.Y;
                eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
                              TransformedPoint[1].X,TransformedPoint[1].Y,PS);
                break;

            case eGFX_LIST_PRIMITIVE_CONNECTED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i-1].X,Scale)     + LP->Center.X;
                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i-1].Y,Scale)   + LP->Center.Y;
                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[i].X,Scale)     + LP->Center.X;
                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[i].Y,Scale)     + LP->Center.Y;
                    eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
                                  TransformedPoint[1].X,TransformedPoint[1].Y,PS);
                }

                break;

            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
                Points = LP->NumPoints>>1;

                for(i=0; i<Points; i++)
                {
                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(LP->PointList[i*2].X,Scale)             + LP->Center.X;
                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(LP->PointList[i*2].Y,Scale)             + LP->Center.Y;
                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(LP->PointList[(i*2)+1].X,Scale)   + LP->Center.X;
                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(LP->PointList[(i*2)+1].Y,Scale)   + LP->Center.Y;
                    eGFX_DrawLine(Image,TransformedPoint[0].X,TransformedPoint[0].Y,
                                  TransformedPoint[1].X,TransformedPoint[1].Y,PS);
                }

                break;
        }
    }
}

void eGFX_WEAK eGFX_DrawRotatedListPrimitive(eGFX_ImagePlane *Image,
                                   eGFX_ListPrimitive *LP ,
                                   uint8_t Angle,
                                   eGFX_PixelState PS)
{
    uint8_t Points;
    uint8_t i;
    eGFX_Point TransformedPoint[2];

    if(LP->NumPoints >1)
    {
        //If we are drawing non connected points,  there must be an even number of them.
        switch(LP->DrawMode)
        {
            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
                Points = LP->NumPoints>>1;

                for(i=0; i<Points; i++)
                {
                    TransformedPoint[0].X = eGFX_FMul_15_0to1_14((LP->PointList[i*2].X), eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                            eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[Angle]);
                    TransformedPoint[0].Y = eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[Angle ]) +
                                            eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]);
                    TransformedPoint[1].X = eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                            eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].Y, eGFX_Fixed_1_14_SineTable[Angle]);
                    TransformedPoint[1].Y = eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                            eGFX_FMul_15_0to1_14(LP->PointList[(i*2)+1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]);
                    TransformedPoint[0].X += LP->Center.X;
                    TransformedPoint[0].Y += LP->Center.Y;
                    TransformedPoint[1].X += LP->Center.X;
                    TransformedPoint[1].Y += LP->Center.Y;
                    eGFX_DrawLine(Image,(TransformedPoint[0].X + LP->Center.X),(TransformedPoint[0].Y  + LP->Center.Y),
                                  (TransformedPoint[1].X + LP->Center.X),(TransformedPoint[1].Y + LP->Center.Y),PS);
                }

                break;

            case eGFX_LIST_PRIMITIVE_CONNECTED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
                    TransformedPoint[0].X +=  LP->Center.X;
                    TransformedPoint[0].Y +=  LP->Center.Y;
                    TransformedPoint[1].X +=  LP->Center.X;
                    TransformedPoint[1].Y +=  LP->Center.Y;
                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
                }

                break;

            default:
            case eGFX_LIST_PRIMITIVE_CLOSED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
                    TransformedPoint[0].X +=  LP->Center.X;
                    TransformedPoint[0].Y +=  LP->Center.Y;
                    TransformedPoint[1].X +=  LP->Center.X;
                    TransformedPoint[1].Y +=  LP->Center.Y;
                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
                }

                TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                         eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
                TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                          eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
                TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
                TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
                TransformedPoint[0].X +=  LP->Center.X;
                TransformedPoint[0].Y +=  LP->Center.Y;
                TransformedPoint[1].X +=  LP->Center.X;
                TransformedPoint[1].Y +=  LP->Center.Y;
                eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
                              (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
                break;
        }
    }
}

void eGFX_WEAK eGFX_DrawScaledRotatedListPrimitive(eGFX_ImagePlane *Image,
        eGFX_ListPrimitive *LP ,
        uint8_t Angle,
        FIXED_7_8 Scale,
        eGFX_PixelState PS)
{
    uint8_t i;
    eGFX_Point TransformedPoint[2];

    if(LP->NumPoints >1)
    {
        switch(LP->DrawMode)
        {
            default:
            case eGFX_LIST_PRIMITIVE_CLOSED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
                }

                TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                         eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
                TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                          eGFX_FMul_15_0to1_14(LP->PointList[LP->NumPoints-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
                TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
                TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[0].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                         eGFX_FMul_15_0to1_14(LP->PointList[0].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
                TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
                TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
                TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
                TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
                eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
                              (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
                break;

            case eGFX_LIST_PRIMITIVE_DISCONNECTED:
                for(i=0; i<LP->NumPoints>>1; i++)
                {
                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i*2].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                              eGFX_FMul_15_0to1_14(LP->PointList[i*2].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                             eGFX_FMul_15_0to1_14(LP->PointList[i*2+1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
                }

                break;

            case eGFX_LIST_PRIMITIVE_CONNECTED:
                for(i=1; i<LP->NumPoints; i++)
                {
                    TransformedPoint[0].X = (eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[Angle])  );
                    TransformedPoint[0].Y = ( eGFX_FMul_15_0to1_14(LP->PointList[i-1].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                              eGFX_FMul_15_0to1_14(LP->PointList[i-1].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff] ) );
                    TransformedPoint[1].X = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]) -
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[Angle]) );
                    TransformedPoint[1].Y = (eGFX_FMul_15_0to1_14(LP->PointList[i].X, eGFX_Fixed_1_14_SineTable[Angle]) +
                                             eGFX_FMul_15_0to1_14(LP->PointList[i].Y, eGFX_Fixed_1_14_SineTable[(Angle + 64)&0xff]));
                    TransformedPoint[0].X = eGFX_FMul_15_0to7_8(TransformedPoint[0].X,Scale)  +    LP->Center.X;
                    TransformedPoint[0].Y = eGFX_FMul_15_0to7_8(TransformedPoint[0].Y,Scale)  +    LP->Center.Y;
                    TransformedPoint[1].X = eGFX_FMul_15_0to7_8(TransformedPoint[1].X,Scale)  +    LP->Center.X;
                    TransformedPoint[1].Y = eGFX_FMul_15_0to7_8(TransformedPoint[1].Y,Scale)  +    LP->Center.Y;
                    eGFX_DrawLine(Image,(TransformedPoint[0].X),(TransformedPoint[0].Y),
                                  (TransformedPoint[1].X),(TransformedPoint[1].Y),PS);
                }

                break;
        }
    }
}
*/

